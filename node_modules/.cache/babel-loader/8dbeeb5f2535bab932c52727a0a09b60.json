{"ast":null,"code":"import _classCallCheck from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\Airdrop.js\";\nimport React, { Component } from \"react\";\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  //Airdrop to have a timer that counts down\n  //initialise the countdown after the customer has stake a certain amount ... 50\n  //timer functionality, countdown, startTimer, state - for time to work\n  function Airdrop() {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this));\n    _this.state = {\n      time: {},\n      seconds: 20\n    };\n    _this.timer = 0;\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Airdrop, [{\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer === 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      //1. countdown one second at a time\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); //2. stop counting when we hit zero\n\n      if (seconds === 0) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds; //20,000 seconds  = how many hours ???\n\n      hours = Math.floor(secs / (60 * 60));\n      var divisorForMinutes = secs % (60 * 60);\n      minutes = Math.floor(divisorForMinutes / 60);\n      var divisorForSeconds = divisorForMinutes % 60;\n      seconds = Math.ceil(divisorForSeconds);\n      var obj = {\n        'h': hours,\n        'm': minutes,\n        's': seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeft = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: timeLeft\n      });\n    }\n  }, {\n    key: \"airdropReleaseTokens\",\n    value: function airdropReleaseTokens() {\n      var stakingBalance = this.props.stakingBalance;\n\n      if (stakingBalance >= '50000000000000000000') {\n        this.startTimer();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      {\n        this.airdropReleaseTokens();\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, this.state.time.m, \":\", this.state.time.s);\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["C:/Data/Udemy Dapp - ethereum and solidity/defi-staking-app-starter/defi-staking-app-starter/src/components/Airdrop.js"],"names":["React","Component","Airdrop","state","time","seconds","timer","startTimer","bind","countDown","setInterval","setState","secondsToTime","clearInterval","secs","hours","minutes","Math","floor","divisorForMinutes","divisorForSeconds","ceil","obj","timeLeft","stakingBalance","props","airdropReleaseTokens","color","m","s"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;;IAEMC,O;;;AAEF;AACA;AACA;AAEA,qBAAc;AAAA;;AAAA;;AACV;AAEA,UAAKC,KAAL,GAAa;AAETC,MAAAA,IAAI,EAAE,EAFG;AAGTC,MAAAA,OAAO,EAAE;AAHA,KAAb;AAMA,UAAKC,KAAL,GAAa,CAAb;AAEA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AAZU;AAab;;;;iCAEY;AAET,UAAI,KAAKF,KAAL,KAAe,CAAf,IAAoB,KAAKH,KAAL,CAAWE,OAAX,GAAqB,CAA7C,EAAgD;AAE5C,aAAKC,KAAL,GAAaI,WAAW,CAAC,KAAKD,SAAN,EAAiB,IAAjB,CAAxB;AAEH;AACJ;;;gCAEW;AAER;AACA,UAAIJ,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC;AAEA,WAAKM,QAAL,CAAc;AAEVP,QAAAA,IAAI,EAAE,KAAKQ,aAAL,CAAmBP,OAAnB,CAFI;AAGVA,QAAAA,OAAO,EAAEA;AAHC,OAAd,EALQ,CAWR;;AACA,UAAIA,OAAO,KAAK,CAAhB,EAAmB;AAEfQ,QAAAA,aAAa,CAAC,KAAKP,KAAN,CAAb;AACH;AAEJ;;;kCAEaQ,I,EAAM;AAEhB,UAAIC,KAAJ,EAAWC,OAAX,EAAoBX,OAApB,CAFgB,CAIhB;;AACAU,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,IAAI,KAAK,EAAT,CAAf,CAAR;AAEA,UAAIK,iBAAiB,GAAGL,IAAI,IAAI,KAAK,EAAT,CAA5B;AAEAE,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,iBAAiB,GAAG,EAA/B,CAAV;AAEA,UAAIC,iBAAiB,GAAGD,iBAAiB,GAAG,EAA5C;AAEAd,MAAAA,OAAO,GAAGY,IAAI,CAACI,IAAL,CAAUD,iBAAV,CAAV;AAEA,UAAIE,GAAG,GAAG;AAEN,aAAKP,KAFC;AAGN,aAAKC,OAHC;AAIN,aAAKX;AAJC,OAAV;AAOA,aAAOiB,GAAP;AACH;;;wCAEmB;AAEhB,UAAIC,QAAQ,GAAG,KAAKX,aAAL,CAAmB,KAAKT,KAAL,CAAWE,OAA9B,CAAf;AAEA,WAAKM,QAAL,CAAc;AAACP,QAAAA,IAAI,EAAEmB;AAAP,OAAd;AAEH;;;2CAEqB;AAElB,UAAIC,cAAc,GAAI,KAAKC,KAAL,CAAWD,cAAjC;;AAEA,UAAGA,cAAc,IAAI,sBAArB,EAA4C;AAExC,aAAKjB,UAAL;AAGH;AAGJ;;;6BAGQ;AAEL;AAAC,aAAKmB,oBAAL;AAA4B;AAC7B,0BACI;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKxB,KAAL,CAAWC,IAAX,CAAgBwB,CADrB,OACyB,KAAKzB,KAAL,CAAWC,IAAX,CAAgByB,CADzC,CADJ;AAKH;;;;EAzGiB5B,S;;AA4GtB,eAAeC,OAAf","sourcesContent":["import React,{Component} from \"react\";\r\n\r\nclass Airdrop extends Component {\r\n\r\n    //Airdrop to have a timer that counts down\r\n    //initialise the countdown after the customer has stake a certain amount ... 50\r\n    //timer functionality, countdown, startTimer, state - for time to work\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n\r\n            time: {},\r\n            seconds: 20\r\n        }\r\n\r\n        this.timer = 0;\r\n\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.countDown = this.countDown.bind(this);\r\n    }\r\n\r\n    startTimer() {\r\n\r\n        if (this.timer === 0 && this.state.seconds > 0) {\r\n\r\n            this.timer = setInterval(this.countDown, 1000);\r\n\r\n        }\r\n    }\r\n\r\n    countDown() {\r\n\r\n        //1. countdown one second at a time\r\n        let seconds = this.state.seconds - 1;\r\n\r\n        this.setState({\r\n\r\n            time: this.secondsToTime(seconds),\r\n            seconds: seconds\r\n        });\r\n\r\n        //2. stop counting when we hit zero\r\n        if (seconds === 0) {\r\n\r\n            clearInterval(this.timer)\r\n        }\r\n\r\n    }\r\n\r\n    secondsToTime(secs) {\r\n\r\n        let hours, minutes, seconds;\r\n\r\n        //20,000 seconds  = how many hours ???\r\n        hours = Math.floor(secs / (60 * 60));\r\n\r\n        let divisorForMinutes = secs % (60 * 60);\r\n\r\n        minutes = Math.floor(divisorForMinutes / 60);\r\n\r\n        let divisorForSeconds = divisorForMinutes % 60;\r\n\r\n        seconds = Math.ceil(divisorForSeconds);\r\n\r\n        let obj = {\r\n\r\n            'h': hours,\r\n            'm': minutes,\r\n            's': seconds\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        let timeLeft = this.secondsToTime(this.state.seconds);\r\n\r\n        this.setState({time: timeLeft});\r\n\r\n    }\r\n\r\n    airdropReleaseTokens(){\r\n\r\n        let stakingBalance  = this.props.stakingBalance;\r\n\r\n        if(stakingBalance >= '50000000000000000000'){\r\n\r\n            this.startTimer();\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        {this.airdropReleaseTokens()}\r\n        return (\r\n            <div style={{color: 'black'}}>\r\n                {this.state.time.m}:{this.state.time.s}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Airdrop;"]},"metadata":{},"sourceType":"module"}