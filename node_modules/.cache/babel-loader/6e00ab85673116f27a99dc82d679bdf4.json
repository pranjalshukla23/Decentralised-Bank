{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navbar from \"./Navbar\";\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    //call this function when page loads\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                //create a web3 instance using window.ethereum provider\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                //if we find web3\n                if (window.web3) {\n                  //create a web3 instance using window.web3.current provider\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } //if neither web3 and metamask found\n                else {\n                    window.alert('No ethereum browser detected! You can check out metamask');\n                  }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; //getting accounts\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[1]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //define state\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '',\n      rwdBalance: '',\n      stakingBalance: '',\n      loading: true\n    };\n    return _this;\n  } //react code\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }, \"Hello, World\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Data/Udemy Dapp - ethereum and solidity/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","props","state","tether","rwd","decentralBank","tetherBalance","rwdBalance","stakingBalance","loading"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;IAEMC,G;;;;;AAEF;;;;;;;;uBAGU,KAAKC,QAAL,E;;;;uBAEA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;qBAMHC,MAAM,CAACC,Q;;;;;AAEN;AACAD,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAd;;uBAEMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;;;;;AAGV;AACK,oBAAIH,MAAM,CAACE,IAAX,EAAgB;AAEjB;AACAF,kBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACH,iBAJI,CAML;AANK,qBAOD;AAEAJ,oBAAAA,MAAM,CAACK,KAAP,CAAa,0DAAb;AACH;;;;;;;;;;;;;;;;;;;;;;;;;AAKKH,gBAAAA,I,GAAOF,MAAM,CAACE,I,EAEpB;;;uBACsBA,IAAI,CAACI,GAAL,CAASC,WAAT,E;;;AAAhBC,gBAAAA,O;AAEN,qBAAKC,QAAL,CAAc;AAACD,kBAAAA,OAAO,EAACA,OAAO,CAAC,CAAD;AAAhB,iBAAd;;uBAEwBN,IAAI,CAACI,GAAL,CAASI,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;;;;;;;;;;;;;;;;;;AAQV,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN,GADe,CAGf;;AACA,UAAKC,KAAL,GAAa;AAETN,MAAAA,OAAO,EAAE,KAFA;AAGTO,MAAAA,MAAM,EAAE,EAHC;AAITC,MAAAA,GAAG,EAAE,EAJI;AAKTC,MAAAA,aAAa,EAAE,EALN;AAMTC,MAAAA,aAAa,EAAE,EANN;AAOTC,MAAAA,UAAU,EAAE,EAPH;AAQTC,MAAAA,cAAc,EAAC,EARN;AASTC,MAAAA,OAAO,EAAE;AATA,KAAb;AAJe;AAgBlB,G,CAED;;;;;6BACQ;AAEJ,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKP,KAAL,CAAWN,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAFJ,CADJ;AAUH;;;;EAnFaf,S;;AAsFlB,eAAeI,GAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Navbar from \"./Navbar\";\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\nimport Tether from '../truffle_abis/Tether.json';\r\n\r\nclass App extends Component{\r\n\r\n    //call this function when page loads\r\n    async UNSAFE_componentWillMount() {\r\n\r\n        await this.loadWeb3();\r\n\r\n        await this.loadBlockchainData();\r\n    }\r\n\r\n    async loadWeb3(){\r\n\r\n        //if we find metamask\r\n        if(window.ethereum){\r\n\r\n            //create a web3 instance using window.ethereum provider\r\n            window.web3 = new Web3(window.ethereum);\r\n\r\n            await window.ethereum.enable();\r\n        }\r\n\r\n        //if we find web3\r\n        else if (window.web3){\r\n\r\n            //create a web3 instance using window.web3.current provider\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n\r\n        //if neither web3 and metamask found\r\n        else{\r\n\r\n            window.alert('No ethereum browser detected! You can check out metamask')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData(){\r\n\r\n        const web3 = window.web3;\r\n\r\n        //getting accounts\r\n        const account = await web3.eth.getAccounts();\r\n\r\n        this.setState({account:account[1]});\r\n\r\n        const networkId = await web3.eth.net.getId();\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //define state\r\n        this.state = {\r\n\r\n            account: '0x0',\r\n            tether: {},\r\n            rwd: {},\r\n            decentralBank: {},\r\n            tetherBalance: '',\r\n            rwdBalance: '',\r\n            stakingBalance:'',\r\n            loading: true,\r\n\r\n        }\r\n    }\r\n\r\n    //react code\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                <Navbar account={this.state.account}/>\r\n                <div className='text-center'>\r\n                    <h1>Hello, World</h1>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}