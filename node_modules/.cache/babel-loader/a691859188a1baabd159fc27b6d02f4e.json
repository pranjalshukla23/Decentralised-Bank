{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Data\\\\Udemy Dapp - ethereum and solidity\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navbar from \"./Navbar\";\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main';\nimport ParticleSettings from './ParticleSettings';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    //call this function when page loads\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() //detect web3 instance of browser\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                //create a web3 instance using window.ethereum provider\n                window.web3 = new Web3(window.ethereum); //enable web3\n\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                //if we find web3\n                if (window.web3) {\n                  //create a web3 instance using window.web3.current provider\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } //if neither web3 and metamask found\n                else {\n                    window.alert('No ethereum browser detected! You can check out metamask');\n                  }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() //load blockchain data\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; //getting accounts\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                console.log(account);\n                this.setState({\n                  account: account[0]\n                }); //get current network id to which metamask is connected if metamask is present\n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                //load tether contract\n                //get network id property (group of properties inside network id) of contract\n                //'5777' : {address:'', networkType: ''}, here 5777 - network id\n                //Tether.networks[networkId] = {address:'', networkType: ''}\n                tetherData = Tether.networks[networkId]; //if network id matches\n\n                if (!tetherData) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                //get an instance of tether contract from abi and contract address\n                //Tether.networks.networkId,address = 'skdchudcdssid9zx'\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                }); //calling balanceOf method of tether contract\n\n                _context3.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log(tetherBalance);\n                _context3.next = 21;\n                break;\n\n              case 20:\n                window.alert('Error! Tether contract not deployed to the detected network');\n\n              case 21:\n                //load RWD Contract\n                //get network id property (group of properties inside network id) of contract\n                //'5777' : {address:'', networkType: ''}, here 5777 - network id\n                //RWD.networks[networkId] =  {address:'', networkType: ''}\n                rwdData = RWD.networks[networkId]; //if network id matches\n\n                if (!rwdData) {\n                  _context3.next = 32;\n                  break;\n                }\n\n                //get an instance of rwd contract from abi and contract address\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                }); //calling balanceOf method of rwd contract\n\n                _context3.next = 27;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 27:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                console.log(rwdBalance);\n                _context3.next = 33;\n                break;\n\n              case 32:\n                window.alert('Error! Reward contract not deployed to the detected network');\n\n              case 33:\n                //load Decentral Bank Contract\n                //get network id property (group of properties inside network id) of contract\n                //'5777' : {address:'', networkType: ''}, here 5777 - network id\n                //DecentralBank.networks[networkId] =  {address:'', networkType: ''}\n                decentralBankData = DecentralBank.networks[networkId]; //if network id matches\n\n                if (!decentralBankData) {\n                  _context3.next = 44;\n                  break;\n                }\n\n                //get an instance of decentral bank contract from abi and contract address\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                }); //calling stakingBalance method of decentral bank contract\n\n                _context3.next = 39;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 39:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log(stakingBalance);\n                _context3.next = 45;\n                break;\n\n              case 44:\n                window.alert('Error! Decentral Bank contract not deployed to the detected network');\n\n              case 45:\n                this.setState({\n                  loading: false\n                });\n\n              case 46:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() //two functions one that stake and other that unstake\n    //leverage our decentral bank contract -  deposit tokens and unstaking\n    //------for staking function ----\n    // 1. depositTokens -> transferFrom......\n    // 2. function approve transaction hash\n    // 3. staking function -> decentralBank.depositTokens()\n\n  }]);\n\n  /* issueTokens = ()=>{\r\n         this.setState({loading:true});\r\n         this.state.decentralBank.methods.issueTokens().send({ from: this.state.account}).on('transactionHash',(hash)=>{\r\n             this.setState({loading:false})\r\n       })\r\n   }*/\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //define state\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.unstakeTokens = function () {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.decentralBank.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '',\n      rwdBalance: '',\n      stakingBalance: '',\n      loading: true\n    };\n    return _this;\n  } //react code\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      //storing the content of Main component inside content\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px',\n            color: 'white'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }\n        }, \"LOADING PLEASE...\") : content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rwdBalance: this.state.rwdBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens // creating a property stakeTokens\n          ,\n          unstakeTokens: this.unstakeTokens // creating a property unstakeTokens\n          ,\n          issueTokens: this.issueTokens,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        style: {\n          position: 'relative'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ParticleSettings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 29\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Data/Udemy Dapp - ethereum and solidity/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","ParticleSettings","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","console","log","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","props","stakeTokens","amount","approve","_address","send","from","on","hash","depositTokens","unstakeTokens","content","margin","color","issueTokens","position","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Navbar from \"./Navbar\";\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\nimport Tether from '../truffle_abis/Tether.json';\r\nimport RWD from '../truffle_abis/RWD.json';\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\r\nimport Main from './Main';\r\nimport ParticleSettings from './ParticleSettings';\r\n\r\n\r\nclass App extends Component{\r\n\r\n    //call this function when page loads\r\n    async UNSAFE_componentWillMount() {\r\n\r\n        await this.loadWeb3();\r\n\r\n        await this.loadBlockchainData();\r\n    }\r\n\r\n    //detect web3 instance of browser\r\n    async loadWeb3(){\r\n\r\n        //if we find metamask\r\n        if(window.ethereum){\r\n\r\n            //create a web3 instance using window.ethereum provider\r\n            window.web3 = new Web3(window.ethereum);\r\n\r\n            //enable web3\r\n            await window.ethereum.enable();\r\n        }\r\n\r\n        //if we find web3\r\n        else if (window.web3){\r\n\r\n            //create a web3 instance using window.web3.current provider\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n\r\n        //if neither web3 and metamask found\r\n        else{\r\n\r\n            window.alert('No ethereum browser detected! You can check out metamask')\r\n        }\r\n    }\r\n\r\n    //load blockchain data\r\n    async loadBlockchainData(){\r\n\r\n        const web3 = window.web3;\r\n\r\n        //getting accounts\r\n        const account = await web3.eth.getAccounts();\r\n\r\n        console.log(account);\r\n\r\n        this.setState({account:account[0]});\r\n\r\n        //get current network id to which metamask is connected if metamask is present\r\n        const networkId = await web3.eth.net.getId();\r\n\r\n        //load tether contract\r\n\r\n        //get network id property (group of properties inside network id) of contract\r\n        //'5777' : {address:'', networkType: ''}, here 5777 - network id\r\n        //Tether.networks[networkId] = {address:'', networkType: ''}\r\n        const tetherData = Tether.networks[networkId];\r\n\r\n        //if network id matches\r\n        if(tetherData){\r\n\r\n            //get an instance of tether contract from abi and contract address\r\n            //Tether.networks.networkId,address = 'skdchudcdssid9zx'\r\n            const tether =  new web3.eth.Contract(Tether.abi,tetherData.address);\r\n\r\n            this.setState({tether});\r\n\r\n            //calling balanceOf method of tether contract\r\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call();\r\n\r\n            this.setState({tetherBalance: tetherBalance.toString()});\r\n\r\n            console.log(tetherBalance);\r\n\r\n\r\n        }\r\n        else{\r\n\r\n            window.alert('Error! Tether contract not deployed to the detected network');\r\n        }\r\n        //load RWD Contract\r\n\r\n        //get network id property (group of properties inside network id) of contract\r\n        //'5777' : {address:'', networkType: ''}, here 5777 - network id\r\n\r\n        //RWD.networks[networkId] =  {address:'', networkType: ''}\r\n        const rwdData = RWD.networks[networkId];\r\n\r\n        //if network id matches\r\n        if(rwdData){\r\n\r\n            //get an instance of rwd contract from abi and contract address\r\n            const rwd =  new web3.eth.Contract(RWD.abi,rwdData.address);\r\n\r\n            this.setState({rwd});\r\n\r\n            //calling balanceOf method of rwd contract\r\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call();\r\n\r\n            this.setState({rwdBalance: rwdBalance.toString()});\r\n\r\n            console.log(rwdBalance);\r\n\r\n        }\r\n        else{\r\n\r\n            window.alert('Error! Reward contract not deployed to the detected network');\r\n        }\r\n\r\n\r\n\r\n        //load Decentral Bank Contract\r\n\r\n        //get network id property (group of properties inside network id) of contract\r\n\r\n        //'5777' : {address:'', networkType: ''}, here 5777 - network id\r\n\r\n        //DecentralBank.networks[networkId] =  {address:'', networkType: ''}\r\n        const decentralBankData = DecentralBank.networks[networkId];\r\n\r\n        //if network id matches\r\n        if(decentralBankData){\r\n\r\n            //get an instance of decentral bank contract from abi and contract address\r\n            const decentralBank =  new web3.eth.Contract(DecentralBank.abi,decentralBankData.address);\r\n\r\n            this.setState({decentralBank});\r\n\r\n            //calling stakingBalance method of decentral bank contract\r\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call();\r\n\r\n            this.setState({stakingBalance: stakingBalance.toString()});\r\n\r\n            console.log(stakingBalance);\r\n\r\n        }\r\n        else{\r\n\r\n            window.alert('Error! Decentral Bank contract not deployed to the detected network');\r\n        }\r\n\r\n        this.setState({loading:false});\r\n\r\n    }\r\n\r\n    //two functions one that stake and other that unstake\r\n    //leverage our decentral bank contract -  deposit tokens and unstaking\r\n\r\n    //------for staking function ----\r\n\r\n    // 1. depositTokens -> transferFrom......\r\n    // 2. function approve transaction hash\r\n    // 3. staking function -> decentralBank.depositTokens()\r\n\r\n    stakeTokens = (amount) => {\r\n        this.setState({loading: true })\r\n        this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) => {\r\n            this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => {\r\n                this.setState({loading:false})\r\n            })\r\n        })\r\n    }\r\n\r\n    unstakeTokens = () => {\r\n        this.setState({loading: true })\r\n        this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('transactionHash', (hash) => {\r\n            this.setState({loading:false})\r\n        })\r\n    }\r\n\r\n   /* issueTokens = ()=>{\r\n\r\n        this.setState({loading:true});\r\n\r\n        this.state.decentralBank.methods.issueTokens().send({ from: this.state.account}).on('transactionHash',(hash)=>{\r\n\r\n            this.setState({loading:false})\r\n        })\r\n    }*/\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //define state\r\n        this.state = {\r\n\r\n            account: '0x0',\r\n            tether: {},\r\n            rwd: {},\r\n            decentralBank: {},\r\n            tetherBalance: '',\r\n            rwdBalance: '',\r\n            stakingBalance:'',\r\n            loading: true,\r\n\r\n        }\r\n    }\r\n\r\n    //react code\r\n    render(){\r\n\r\n        //storing the content of Main component inside content\r\n        let content;\r\n        {\r\n            this.state.loading ? content =\r\n            <p id='loader' className='text-center' style={{margin:'30px',color:'white'}}>\r\n                LOADING PLEASE...</p>: content=\r\n                <Main\r\n\r\n                    tetherBalance = {this.state.tetherBalance}\r\n                    rwdBalance = {this.state.rwdBalance}\r\n                    stakingBalance = {this.state.stakingBalance}\r\n                    stakeTokens = {this.stakeTokens}// creating a property stakeTokens\r\n                    unstakeTokens = {this.unstakeTokens}// creating a property unstakeTokens\r\n                    issueTokens = {this.issueTokens}\r\n                />\r\n        }\r\n\r\n        return (\r\n            <div className='App' style={{position:'relative'}}>\r\n                <div style={{position:'absolute'}}>\r\n                    <ParticleSettings/>\r\n                </div>\r\n\r\n                <Navbar account={this.state.account}/>\r\n                <div className='container-fluid mt-5'>\r\n                    <div className=\"row\">\r\n                        <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{maxWidth:'600px', minHeight:'100vm'}}>\r\n                            <div>\r\n                                {content}\r\n                            </div>\r\n\r\n                        </main>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}